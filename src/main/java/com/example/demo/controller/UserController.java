package com.example.demo.controller;


import com.example.demo.models.Book;
import com.example.demo.models.Role;
import com.example.demo.models.User;
import com.example.demo.repositories.RoleRepository;
import com.example.demo.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.naming.Binding;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import java.util.List;
import java.util.Vector;

@Controller
@RequestMapping("/user")

public class UserController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;


    @GetMapping("/add")
    public String addForm(HttpSession session,Model model) {
        if(session.getAttribute("USER")==null){
            return"redirect:/login";
        };
        if(!(((User) session.getAttribute("USER"))
                .getUserRole().equals("ROLE_ADMIN"))) {
            return "redirect:/login";
        };

        model.addAttribute("user", new User());
        return "userAdder";
    }

    @PostMapping("/add")
    public ModelAndView addSubmit(HttpSession session,@Valid @ModelAttribute User user,BindingResult bindingResult) {

//        validator.validate(user,bindingResult);
        if(userRepository.findAllByUserMail(user.getUserMail()).size()!=0) {
            bindingResult.rejectValue("userMail",   "email.existant", "email deja existant");
            return new ModelAndView("userAdder");

        }
        if(userRepository.findAllByUserLogin(user.getUserLogin()).size()!=0) {
            bindingResult.rejectValue("userLogin", "login.existant", "login deja existant");
            return new ModelAndView("userAdder");
        }
        if (bindingResult.hasErrors()) {
            return new ModelAndView("userAdder");
        }

        user.setConnected(false);

        userRepository.save(user);

        Role r = roleRepository.findByName("ROLE_USER");

        List<Role> roles= new Vector<Role>();
        roles.add( r);
        user.setRoles(roles);
        userRepository.save(user);

        System.out.println("add setter reached");
        return new ModelAndView("redirect:/user/all");
    }

    @GetMapping(path="/all")
    public String getAllBooks(HttpSession session,Model model) {
        if(session.getAttribute("USER")==null){
            return "redirect:/login";
        };
        if(!(((User) session.getAttribute("USER"))
                .getUserRole().equals("ROLE_ADMIN"))) {
            return "redirect:/login";
        };
        model.addAttribute("users", userRepository.findAll());
        return "userLister";
    }

    @GetMapping("/edit/{id}")
    public String editForm(HttpSession session,@PathVariable("id") Integer id, Model model) {
        if(session.getAttribute("USER")==null){
            return "redirect:/login";
        };
        if(!(((User) session.getAttribute("USER"))
                .getUserRole().equals("ROLE_ADMIN"))) {
            return "redirect:/login";
        };
        User u = userRepository.findOne(id);
        try {
            session.setAttribute("USER_ROLE", u.getUserRole());
        }catch (Exception ex){
            System.out.println("nooooo");}
            model.addAttribute("user", u);
        return "userEdit";
    }
    @GetMapping("/logout")
    public String disconnect(HttpSession session, Model model) {
        if(session.getAttribute("USER")==null){
            return "redirect:/login";
        };
        User user = ((User) session.getAttribute("USER"));
        user.setConnected(false);
        userRepository.save(user);

        session.removeAttribute("USER");
        return "redirect:/login";
    }

    @PostMapping("/edit")
    public ModelAndView editSubmit(HttpSession session,
                                   @Valid @ModelAttribute User user,
                                   BindingResult bindingResult) {



        if(session.getAttribute("USER")==null){
            return new ModelAndView("redirect:/login");
        };

        Role r = roleRepository.findByName((String) session.getAttribute("USER_ROLE"));
        List <Role> l = new Vector<Role>();
        l.add(r);
        user.setRoles(l);

        if((!user.getUserID().equals(((User)
                session.getAttribute("USER")).getUserID()))&&
                (!user.getUserRole().equals("ROLE_ADMIN"))) {
            return new ModelAndView("redirect:/login");
        };
        if(user.getUserID().equals(((User)
                session.getAttribute("USER")).getUserID()))
        user.setConnected(true);

        if((!user.getUserID().equals(userRepository.findAllByUserMail(user.getUserMail()).get(0).getUserID()))
                &&(userRepository.findAllByUserMail(user.getUserMail()).size()!=0)) {
            bindingResult.rejectValue("userMail",   "email.existant", "email deja existant");
            return new ModelAndView("edit");
        }

        if((!user.getUserID().equals(userRepository.findAllByUserLogin(user.getUserLogin()).get(0).getUserID()))
                &&(userRepository.findAllByUserLogin(user.getUserLogin()).size()!=0)) {
            bindingResult.rejectValue("userLogin", "login.existant", "login deja existant");
            return new ModelAndView("edit");
        }

        if (bindingResult.hasErrors()) {
            return new ModelAndView("edit");
        }
        userRepository.save(user);
        return new ModelAndView("redirect:/user/all");
    }

    @GetMapping("/delete/{id}")
    public ModelAndView deleteUser(HttpSession session,@PathVariable("id") Integer id, Model model) {
        if(session.getAttribute("USER")==null){
            return new ModelAndView("redirect:/login");
        };
        if(!(((User) session.getAttribute("USER"))
                .getUserRole().equals("ROLE_ADMIN"))) {
            return new ModelAndView("redirect:/login");
        };
        userRepository.delete(userRepository.findOne(id));
        return new ModelAndView("redirect:/user/all");
    }

    @GetMapping("/promote/{id}")
    public ModelAndView promoteUser(HttpSession session,@PathVariable("id") Integer id, Model model) {
        if(session.getAttribute("USER")==null){
            return new ModelAndView("redirect:/login");
        };
        if(!(((User) session.getAttribute("USER"))
                .getUserRole().equals("ROLE_ADMIN"))) {
            return new ModelAndView("redirect:/login");
        };

        User user =userRepository.findOne(id);
        Role r = roleRepository.findByName("ROLE_ADMIN");
        List <Role> l = new Vector<Role>();
        l.add(r);
        user.setRoles(l);
        userRepository.save(user);

        return new ModelAndView("redirect:/user/all");
    }

    @GetMapping("/configure")
    public String editForm(HttpSession session, Model model) {
        if(session.getAttribute("USER")==null){
            return "redirect:/login";
        };

        User u = (User) session.getAttribute("USER");
        try{session.setAttribute("USER_ROLE",u.getUserRole());}catch(Exception e){
            System.out.println("neeeeee");
        }
        model.addAttribute("user", u);
        return "userEdit";
    }
}
