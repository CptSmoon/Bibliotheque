package com.example.demo.controller;

import com.example.demo.models.Book;
import com.example.demo.repositories.bookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;


import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Controller
public class BookController {
    @Autowired
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private bookRepository bookRepository;

    public static String IMAGE_UPLOAD_FOLDER = "src/main/resources/static/img/";
    public static String PATH_UPLOAD_FOLDER = "src/main/resources/static/path/";


    @GetMapping("/addBook")
    public String addForm(ModelMap model) {

        model.addAttribute("book", new Book());


        return "adder";
    }

    @PostMapping("/addBook")
    public  ModelAndView addSubmit(@ModelAttribute Book book,@RequestParam("image") MultipartFile image, @RequestParam("file") MultipartFile file,ModelMap model) {

        if(!file.isEmpty()) {

            try {
                // Get the file and save it somewhere
                byte[] bytes = file.getBytes();
                Path path = Paths.get(PATH_UPLOAD_FOLDER +book.getBookID()+ file.getOriginalFilename());
                Files.write(path, bytes);
                book.setBookPath(file.getOriginalFilename());

            } catch (IOException e) {
                book.setBookPath("no path");
            }

            if(!image.isEmpty()) {

                try {
                    // Get the image and save it somewhere
                    byte[] bytes1 = image.getBytes();
                    Path path1 = Paths.get(IMAGE_UPLOAD_FOLDER +book.getBookID()+ image.getOriginalFilename());
                    Files.write(path1, bytes1);
                    book.setBookImage(image.getOriginalFilename());

                } catch (IOException e) {
                    book.setBookImage("alt.png");
                }
            }
            else{
                System.out.println(" ----> " + book.getBookID());
                book.setBookImage(bookRepository.findOne(book.getBookID()).getBookImage());
            }
        }
        else{
            System.out.println(" ----> " + book.getBookID());
            book.setBookPath(bookRepository.findOne(book.getBookID()).getBookPath());
        }

        bookRepository.save(book);
        return new ModelAndView("redirect:/allBooks");
    }

    @GetMapping(path="/allBooks")
    public String getAllBooks(Model model) {
        model.addAttribute("books", bookRepository.findAll());
        return "lister";
    }

    @GetMapping("/editBook/{id}")
    public String editForm(@PathVariable("id")Integer id,Model model) {
        Book b = bookRepository.findOne(id);
        System.out.println(b);
        model.addAttribute("book", b);
        return "edit";
    }

    @PostMapping("/editBook")
    public  @ResponseBody String editSubmit(@ModelAttribute Book book) {
        bookRepository.save(book);
        return "edit";
    }

    @GetMapping("/deleteBook/{id}")
    public String deleteBook(@PathVariable("id")Integer id,Model model) {
        bookRepository.delete(id);
        return "lister" ;
    }

}
